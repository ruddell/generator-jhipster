<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
/* tslint:disable no-unused-expression */
import { element, by, browser } from 'protractor';

import NavBarPage from '../../page-objects/navbar-page';
import SignInPage from '../../page-objects/signin-page';
import { waitUntilDisplayed } from '../../util/utils';

describe('Administration', () => {
  let navBarPage: NavBarPage;
  let signInPage: SignInPage;

  beforeAll(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage(true);
    signInPage = await navBarPage.getSignInPage();
    <%_ if (authenticationType !== 'oauth2') { _%>
    await signInPage.autoSignInUsing('admin', 'admin');
    <%_ } _%>
    await waitUntilDisplayed(navBarPage.adminMenu);
  });

  <%_ if (authenticationType !== 'oauth2') { _%>
  describe('User management', () => {
    it('should load user management', async () => {
      await navBarPage.clickOnAdminMenuItem('user-management');
      // Title should be equal to 'Users'
      expect(await element(by.className('userManagement-page-heading')).isPresent()).toBe(true);
    });
  });
  <%_ } _%>

  it('should load metrics', async () => {
    await navBarPage.clickOnAdminMenuItem('metrics');
    expect(await element(by.className('metrics-page-heading')).getText()).toEqual('Application Metrics');
  });

  it('should load health', async () => {
    await navBarPage.clickOnAdminMenuItem('health');
    expect(await element(by.className('health-page-heading')).getText()).toEqual('Health Checks');
  });

  it('should load configuration', async () => {
    await navBarPage.clickOnAdminMenuItem('configuration');
    expect(await element(by.className('configuration-page-heading')).getText()).toEqual('Configuration');
  });

<%_ if (databaseType !== 'no' && databaseType !== 'cassandra') { _%>
  it('should load audits', async () => {
    await navBarPage.clickOnAdminMenuItem('audits');
    expect(await element(by.className('audits-page-heading')).getText()).toEqual('Audits');
  });

<%_ } _%>
  it('should load logs', async () => {
    await navBarPage.clickOnAdminMenuItem('logs');
    expect(await element(by.className('logs-page-heading')).getText()).toEqual('Logs');
  });

  afterAll(async () => await navBarPage.autoSignOut());
});
